// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: GroupMessage.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///发送群消息
struct Msg_GroupMessageSendReq {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 群组id
  var groupID: UInt64 = 0

  var type: IMType = .unknown

  /// 消息内容
  var content: String = String()

  /// 发送者id
  var from: UInt64 = 0

  /// 发送时间
  var sendTime: UInt64 = 0

  /// 附加信息
  var extra: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

///发送群消息响应
struct Msg_GroupMessageSendResp {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var resultCode: UInt32 = 0

  var msgID: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

///群消息通知
struct Msg_GroupMessageNotify {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var groupID: UInt64 = 0

  var msgID: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

///群消息通知ack
struct Msg_GroupMessageNotifyAck {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var msgID: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

///获取群消息
struct Msg_GroupMessageGetReq {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var groupID: UInt64 = 0

  var msgIDList: [UInt64] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

///获取群消息响应
struct Msg_GroupMessageGetResp {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var resultCode: UInt32 = 0

  var msgList: [GroupIMProto] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 获取指定count的最新消息
struct Msg_GroupMessageRecentReq {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var groupID: UInt64 = 0

  var count: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 获取指定count的最新消息响应
struct Msg_GroupMessageRecentResp {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var resultCode: UInt32 = 0

  var groupID: UInt64 = 0

  var msgList: [GroupIMProto] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

///上下拉消息
struct Msg_GroupMessageDirectionReq {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var groupID: UInt64 = 0

  var msgID: UInt64 = 0

  var direction: MsgDirection = .up

  var count: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

///上下拉消息响应
struct Msg_GroupMessageDirectionResp {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var resultCode: UInt32 = 0

  var groupID: UInt64 = 0

  var msgList: [GroupIMProto] = []

  var direction: MsgDirection = .up

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 获取群消息未读计数
struct Msg_GroupMessageGetUnreadCountReq {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 群组的id list
  var groupIDList: [UInt64] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Msg_GroupMessageGetUnreadCountResp {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var resultCode: UInt32 = 0

  var unreadList: [UnreadGroupMessage] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "msg"

extension Msg_GroupMessageSendReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GroupMessageSendReq"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "group_id"),
    2: .same(proto: "type"),
    3: .same(proto: "content"),
    4: .same(proto: "from"),
    5: .standard(proto: "send_time"),
    6: .same(proto: "extra"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.groupID)
      case 2: try decoder.decodeSingularEnumField(value: &self.type)
      case 3: try decoder.decodeSingularStringField(value: &self.content)
      case 4: try decoder.decodeSingularUInt64Field(value: &self.from)
      case 5: try decoder.decodeSingularUInt64Field(value: &self.sendTime)
      case 6: try decoder.decodeSingularStringField(value: &self.extra)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.groupID != 0 {
      try visitor.visitSingularUInt64Field(value: self.groupID, fieldNumber: 1)
    }
    if self.type != .unknown {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 2)
    }
    if !self.content.isEmpty {
      try visitor.visitSingularStringField(value: self.content, fieldNumber: 3)
    }
    if self.from != 0 {
      try visitor.visitSingularUInt64Field(value: self.from, fieldNumber: 4)
    }
    if self.sendTime != 0 {
      try visitor.visitSingularUInt64Field(value: self.sendTime, fieldNumber: 5)
    }
    if !self.extra.isEmpty {
      try visitor.visitSingularStringField(value: self.extra, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Msg_GroupMessageSendReq) -> Bool {
    if self.groupID != other.groupID {return false}
    if self.type != other.type {return false}
    if self.content != other.content {return false}
    if self.from != other.from {return false}
    if self.sendTime != other.sendTime {return false}
    if self.extra != other.extra {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Msg_GroupMessageSendResp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GroupMessageSendResp"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "result_code"),
    2: .standard(proto: "msg_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self.resultCode)
      case 2: try decoder.decodeSingularUInt64Field(value: &self.msgID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.resultCode != 0 {
      try visitor.visitSingularUInt32Field(value: self.resultCode, fieldNumber: 1)
    }
    if self.msgID != 0 {
      try visitor.visitSingularUInt64Field(value: self.msgID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Msg_GroupMessageSendResp) -> Bool {
    if self.resultCode != other.resultCode {return false}
    if self.msgID != other.msgID {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Msg_GroupMessageNotify: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GroupMessageNotify"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "group_id"),
    2: .standard(proto: "msg_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.groupID)
      case 2: try decoder.decodeSingularUInt64Field(value: &self.msgID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.groupID != 0 {
      try visitor.visitSingularUInt64Field(value: self.groupID, fieldNumber: 1)
    }
    if self.msgID != 0 {
      try visitor.visitSingularUInt64Field(value: self.msgID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Msg_GroupMessageNotify) -> Bool {
    if self.groupID != other.groupID {return false}
    if self.msgID != other.msgID {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Msg_GroupMessageNotifyAck: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GroupMessageNotifyAck"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "msg_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.msgID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.msgID != 0 {
      try visitor.visitSingularUInt64Field(value: self.msgID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Msg_GroupMessageNotifyAck) -> Bool {
    if self.msgID != other.msgID {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Msg_GroupMessageGetReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GroupMessageGetReq"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "group_id"),
    2: .standard(proto: "msg_id_list"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.groupID)
      case 2: try decoder.decodeRepeatedUInt64Field(value: &self.msgIDList)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.groupID != 0 {
      try visitor.visitSingularUInt64Field(value: self.groupID, fieldNumber: 1)
    }
    if !self.msgIDList.isEmpty {
      try visitor.visitPackedUInt64Field(value: self.msgIDList, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Msg_GroupMessageGetReq) -> Bool {
    if self.groupID != other.groupID {return false}
    if self.msgIDList != other.msgIDList {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Msg_GroupMessageGetResp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GroupMessageGetResp"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "result_code"),
    2: .standard(proto: "msg_list"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self.resultCode)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.msgList)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.resultCode != 0 {
      try visitor.visitSingularUInt32Field(value: self.resultCode, fieldNumber: 1)
    }
    if !self.msgList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.msgList, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Msg_GroupMessageGetResp) -> Bool {
    if self.resultCode != other.resultCode {return false}
    if self.msgList != other.msgList {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Msg_GroupMessageRecentReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GroupMessageRecentReq"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "group_id"),
    2: .same(proto: "count"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.groupID)
      case 2: try decoder.decodeSingularUInt32Field(value: &self.count)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.groupID != 0 {
      try visitor.visitSingularUInt64Field(value: self.groupID, fieldNumber: 1)
    }
    if self.count != 0 {
      try visitor.visitSingularUInt32Field(value: self.count, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Msg_GroupMessageRecentReq) -> Bool {
    if self.groupID != other.groupID {return false}
    if self.count != other.count {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Msg_GroupMessageRecentResp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GroupMessageRecentResp"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "result_code"),
    2: .standard(proto: "group_id"),
    3: .standard(proto: "msg_list"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self.resultCode)
      case 2: try decoder.decodeSingularUInt64Field(value: &self.groupID)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.msgList)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.resultCode != 0 {
      try visitor.visitSingularUInt32Field(value: self.resultCode, fieldNumber: 1)
    }
    if self.groupID != 0 {
      try visitor.visitSingularUInt64Field(value: self.groupID, fieldNumber: 2)
    }
    if !self.msgList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.msgList, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Msg_GroupMessageRecentResp) -> Bool {
    if self.resultCode != other.resultCode {return false}
    if self.groupID != other.groupID {return false}
    if self.msgList != other.msgList {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Msg_GroupMessageDirectionReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GroupMessageDirectionReq"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "group_id"),
    2: .standard(proto: "msg_id"),
    3: .same(proto: "direction"),
    4: .same(proto: "count"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.groupID)
      case 2: try decoder.decodeSingularUInt64Field(value: &self.msgID)
      case 3: try decoder.decodeSingularEnumField(value: &self.direction)
      case 4: try decoder.decodeSingularUInt32Field(value: &self.count)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.groupID != 0 {
      try visitor.visitSingularUInt64Field(value: self.groupID, fieldNumber: 1)
    }
    if self.msgID != 0 {
      try visitor.visitSingularUInt64Field(value: self.msgID, fieldNumber: 2)
    }
    if self.direction != .up {
      try visitor.visitSingularEnumField(value: self.direction, fieldNumber: 3)
    }
    if self.count != 0 {
      try visitor.visitSingularUInt32Field(value: self.count, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Msg_GroupMessageDirectionReq) -> Bool {
    if self.groupID != other.groupID {return false}
    if self.msgID != other.msgID {return false}
    if self.direction != other.direction {return false}
    if self.count != other.count {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Msg_GroupMessageDirectionResp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GroupMessageDirectionResp"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "result_code"),
    2: .standard(proto: "group_id"),
    3: .standard(proto: "msg_list"),
    4: .same(proto: "direction"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self.resultCode)
      case 2: try decoder.decodeSingularUInt64Field(value: &self.groupID)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.msgList)
      case 4: try decoder.decodeSingularEnumField(value: &self.direction)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.resultCode != 0 {
      try visitor.visitSingularUInt32Field(value: self.resultCode, fieldNumber: 1)
    }
    if self.groupID != 0 {
      try visitor.visitSingularUInt64Field(value: self.groupID, fieldNumber: 2)
    }
    if !self.msgList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.msgList, fieldNumber: 3)
    }
    if self.direction != .up {
      try visitor.visitSingularEnumField(value: self.direction, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Msg_GroupMessageDirectionResp) -> Bool {
    if self.resultCode != other.resultCode {return false}
    if self.groupID != other.groupID {return false}
    if self.msgList != other.msgList {return false}
    if self.direction != other.direction {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Msg_GroupMessageGetUnreadCountReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GroupMessageGetUnreadCountReq"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "group_id_list"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedUInt64Field(value: &self.groupIDList)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.groupIDList.isEmpty {
      try visitor.visitPackedUInt64Field(value: self.groupIDList, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Msg_GroupMessageGetUnreadCountReq) -> Bool {
    if self.groupIDList != other.groupIDList {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Msg_GroupMessageGetUnreadCountResp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GroupMessageGetUnreadCountResp"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "result_code"),
    2: .standard(proto: "unread_list"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self.resultCode)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.unreadList)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.resultCode != 0 {
      try visitor.visitSingularUInt32Field(value: self.resultCode, fieldNumber: 1)
    }
    if !self.unreadList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.unreadList, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Msg_GroupMessageGetUnreadCountResp) -> Bool {
    if self.resultCode != other.resultCode {return false}
    if self.unreadList != other.unreadList {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
